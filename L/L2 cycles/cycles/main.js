'use strict';
console.log('lection 1');

// Циклы while, do while, for



// While - пока условие верно, выполняется код из цикла;
// while (условие) {действие кода; ещё одно действие};
// i++ в данном случае ставим что бы цикл не выполнялся вечно а двигался с шагом в +1 это называется итерация "++";
// while(i) === while(i!=0); т.к. условие логическое - оно НЕ может быть равно НУЛЮ;

// var a = prompt('введите число');
// // var b;
// while (a<=50) {
//     console.log(a++);
//     // i++;
//     // var b = a-1;
//     alert(a);
// }



// do...while такой цикл сначала выполняет тело (код из цикла), а после проверяет условие цикла;
// do {код из цикла - тело} while (условие);

// var i = prompt('enter number');
// do {
//     alert(i); 
//     console.log(+i); 
//     i++;
// }
// while(i<=40);



// Цикл for - чаще всего используют его. Где указывают начало, условие, шаг, тело.
// for (начало; условие; шаг) {тело цикла;}


// var i = +prompt('number pls');
// for (i; i<=20; i++){
//     console.log(i);
// }



// части цикла можно пропускать - шаг и начало
// var i = +prompt('number pls');
// for (;i <=20;){
//     console.log(i);
// }



// так же можно прерывать по сути бесконечный цикл с помощью дистрибутива break и определенного условия через if
// if (!value) {break;}
// if (условие) {break;}

// var sum = 0;
// while (true) {
//     var value = +prompt('next number pls', '');
//     if (!value) {break;}
//     sum += value;
// }
// alert('сумма ' + sum);



// Continue делает коррективы в цикле, и приостанавливает выдачу только их (условий) - остальное выдаётся
// if(!(a % 2 == 0))continue;
// if(условие)continue;

// проверка на чётность - чётные не выдаются
// var a = prompt('', 4);
// var b = prompt('', 2);
// var c = a%b;
// console.log(c);

// вывести нечётное число суммы трёх переменных
// var a = +prompt('enter number A pls', 2);
// console.log(a);
// var b = +prompt('enter number B pls', 2);
// console.log(b);
// var c = +prompt('enter number C pls', 2);
// console.log(c);
// if ((a+b+c) % 2 == 0) {
//     alert('summ A+B+C = ' + +(a+b+c));
//     console.log();
// }

// for (var i = 0; i < 10; i++) {
//     if (i % 2 == 0) continue; // только не чётные
//     alert(i);
// }

// for (var a=prompt('enter begin','');a<30;a++) {
//     if(!(a % 2 == 0)) continue; // только четные
//     alert(a);
// }



// Outer - метки. Ставятся перед выражением/циклами-группой
//  вызывается обращаясь к ней второй раз, указывая директиву брейк или континью.
// имя метки может быть любым
// outer:    какой-то цикл      break outer;

// artem: for (var i = 0; i < 3; i++) {
//     for (var j = 0; j < 3; j++) {
//       var input = prompt('Значение в координатах ' + i + ',' + j, '');
//       // если отмена ввода или пустая строка -
//       // завершить оба цикла
//       if (!input) break artem; // (*)
//     }
//   }
//   alert('Готово!');


// задача ++i // 1,2,3,4
// var i = 0;
// while (++i < 5) alert( i );


//задача i++ // 1,2,3,4,5
// var i = 0;
// while (i++ < 5) alert( i );

// задача i++ в for
// for (var i = 0; i < 5; ++i) alert( i );
// for (var i = 0; i < 5; i++) alert( i ); 

// задача с 2 до 10 парные
// for (var i=2; i<=10; i++) {    
//     if(i%2==0) {
//         alert(i);
//     }
// } 

// задача с for на while
// for (var i = 0; i < 3; i++) {
//     alert( "номер " + i + "!" );
// }
// 
// var i = 0;
// while(i<3) {
//     alert('nomer '+i+'!');
//     i++;
// }

// задача простых чисел от 2 до 10
// outer:
// for (var i=2; i<=10; i++) {
//     for (var j=2; j<i; j++){
//         if(i%j==0) continue outer; 
//     }
//     alert(i);
// }
// Для всех i от 1 до 10 {
// проверить, делится ли число i на какое - либо из чисел до него
// если делится, то это i не подходит, берем следующее
// если не делится, то i - простое число


// задача ввести число более 100 и возврат если меньше

// var i;
// do{
//     i= +prompt('vvedite chislo', 100);
// }
// while(i<=100 && i != null);
// console.log(i);


// outer:
// var i = prompt('vvedite i ', 100);
// for(var i=0; i<1000; i++); {
//     if(i>100) {
    //     continue outer;
    // }
    // console.log(i);
// }

// for(;true;){
//     var like = +prompt('Введите число больше 100', '');
//     if(like < 100){
//         alert('Вы даун, попробуйте еще раз!');
//         continue;
//         } else if( like == +null) 
//         {alert('Вы даун, попробуйте еще раз!');
//         break; }
//         else{
//         alert('Вы молодец!');
//         break;
//         }
//     }


// var i, j;
// loop1:
// for (i = 0; i < 3; i++) {      //Первый цикл, обозначенный меткой "loop1"
//    loop2:
//    for (j = 0; j < 3; j++) {   //Второй цикл, обозначенный меткой "loop2"
//       if (i == 1 && j == 1) {
//          continue loop1;
//       }
//       console.log("i = " + i + ", j = " + j);
//    }
// }

// Обратите внимание на пропуск "i = 1, j = 1" и "i = 1, j = 2"


// var i, j;
// loop1:
// for (i = 0; i < 3; i++) {      //Первый цикл, обозначенный меткой "loop1"
//    loop2:
//    for (j = 0; j < 3; j++) {   //Второй цикл, обозначенный меткой "loop2"
//       if (i == 1 && j == 1) {
//          break loop1;
//       }
//       console.log("i = " + i + ", j = " + j);
//    }
// }


// Цикл в цикле так же используют для того что бы вложенному циклу задать порядок, пропуск или 
// срок действия (допустим вывести первых 5 чисел, но нужно пропустить "3")
// N выводит числа равные сумме предыдущих двух n1 = n + i; n = 1+0 == 1; n2 = 1 + 2 == 3; n3 = 3 + continue; n4 = 3 +4==7; n5=7+5==12; 
// var i = 0;
// var n = 0;
// while (i < 10) {
//    i++;
//    if (i === 3) {
//       continue;
//    }
//    n +=i;
//   //  console.log('i = ' + i);
//    console.log('n = ' + n);
// }



// var i = 0, 
//     j = 8;
// checkiandj: while (i < 4) {
//    console.log("i: " + i);
//    i++;
//    checkj: while (j > 4) {
//       console.log("j: "+ j);
//       j--;
//       if ((j % 2) == 0)
//          continue checkj;
//       console.log(j + " является нечётным.");
//    }
//    console.log("i = " + i);
//    console.log("j = " + j);
// }


// var i = 0;
// while (i < 6) {
//    if (i == 3) {
//       break;
//    }
//    i++;
//    console.log (i);
// }


// число фибоначи 
// var x = 0;
// var y = 0;
// var n = 0;
// while (n < 30) {
//   x++;
//   y++;
//   n++;
//   console.log(y);
  // console.log(x);
//   console.log('fibonachi ' + n + ' is ' + x);
// }


// var result = "";
// var i = 0;
// do {
//   i++;
//   result = result + i;
//   console.log(i);
// } while (i < 5);
// result = result + i;
// console.log(result);


// Ввести с клавиатуры 2 числа a и b (где a <<< b). Запустить цикл перебора от a до b. Вывести в консоль квадраты чётных чисел.
// var a = +prompt('enter ur number (lower)', 3);
// var b = +prompt('enter ur number (higher)', 10);
// number:
// if(!(isNaN(a, b))){
//   alert('thx');
// } else {
//   alert('enter number pls!');
//   console.log(a, b);
//   break number;
// }
// for(var i=a; i<=b; i++) {
//     if(i%2==0) {
//       console.log('i = ' + i);  
//       var c=i*i;
//       console.log('i*i = ' + c);
//     }  
// }














// Циклы можно вкладывать друг в друга
// do...while такой цикл сначала выполняет тело (код из цикла), а после проверяет условие цикла;
// do {код из цикла - тело} while (условие);


// While - пока условие верно, выполняется код из цикла;
// while (условие) {действие кода; ещё одно действие};
// i++ в данном случае ставим что бы цикл не выполнялся вечно а двигался с шагом в +1 это называется итерация "++";
// while(i) === while(i!=0); т.к. условие логическое - оно НЕ может быть равно НУЛЮ;


// Цикл for - чаще всего используют его. Где указывают начало, условие, шаг, тело.
// for (начало; условие; шаг) {тело цикла;}

// части цикла можно пропускать - шаг и начало
// так же можно прерывать по сути бесконечный цикл с помощью дистрибутива break и определенного условия через if
// Continue делает коррективы в цикле, и приостанавливает выдачу только их (условий) - остальное выдаётся

// Outer - метки. Ставятся перед выражением/циклами-группой
//  вызывается обращаясь к ней второй раз, указывая директиву брейк или континью.
// имя метки может быть любым
// outer:    какой-то цикл      break outer;


// ++i сначала увеличит i, а потом уже произойдёт сравнение и выполнение 
// Оператор i++ увеличивает i, возвращая старое значение

// для for (; ; i++/++i)
// Увеличение i++ выполняется отдельно от проверки условия, 
// значение i при этом не используется, поэтому нет никакой разницы между i++ и ++i.


// Чётность проверяется по остатку при делении на 2, используя оператор «деление с остатком» %: i % 2.
// Цикл в цикле так же используют для того что бы вложенному циклу задать порядок действия или срок его действия (допустим вывести первых 5 чисел фибоначи)