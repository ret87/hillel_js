'use strict';
console.log('Objects');

    // // Объекты в JavaScript.
// - Это ассоциативный массив: структура, пригодная для хранения любых данных. 
// - Языковые возможности для объектно-ориентированного программирования. Эти возможности мы изучим в последующих разделах учебника.
// Ассоциативный массив – структура данных, в которой можно хранить любые данные в формате ключ-значение.

// // Создание объектов
// var obj = {заполнение ключами и их значениями}
// обращение к объекту по имени  obj
// обращение к конкретному ключу по имени объекта и ключу значения obj.namekey
// обращение к конкретному ключу по имени объекта и ключу значения через квадратніе скобки obj["namekey"]
// так же можно добавлять отдельно елементы, обращаясь к имени объекта.ключ = значение;  obj.namekey = value;
// если добавляем строку то как строку через кавычки "", если число то можно и просто цифру написать
// удалять можно так же - обращаясь к имени объекта и ключу через   delete obj.namekey;
// можно проверять на наличие ключей в объекте через конструкцию if("namekey" in obj){some do} 
// но так же можно через undefined       if(obj.namekey === undefined){some do}
// В качестве значения можно тут же указать и другой объект использовав его как ключ - значени в родительском объекте obj = {obj2:{}}

        // // Объекты: перебор свойств
// Для перебора всех свойств из объекта используем  for (var key in obj){код что делать}, где key имя переменной и obj имя объекта;
// for..in последовательно переберёт свойства объекта obj, имя каждого свойства будет записано в key и вызвано тело цикла;
// вызывать значения можно через obj[key];
// для подсчёта ключей (свойств) объекта можно использовать счётчик в комбинации с for in
// порядок перебора: изначально строковые ключи (свойства), идут так как их задали, цифры же перебивают - идут первыми и по возраст.
// но можно цифры привести к строковым с помощью добавления " + "  перед числом



    // // Создание объектов
// var obj = {заполнение ключами и их значениями}
var o = new Object();
var o1 = {
    name: 'Artem',
    age: 18.
}; 
console.log(o);
// обращение к объекту по имени obj
console.log(o1);
// обращение к конкретному ключу по имени объекта и ключу значения через точку obj.namekey
console.log(o1.name);
// обращение к конкретному ключу по имени объекта и ключу значения через квадратніе скобки obj["namekey"]
console.log(o1['age']);
// так же можно добавлять отдельно елементы, обращаясь к имени объекта.ключ = значение;  obj.namekey = value;
o1.sex = "male";
o1.born = 1987;
console.log(o1);
// так же можно добавлять отдельно елементы, обращаясь к имени объекта['ключ'] = 'значение';  obj['namekey'] = 'value';
o1['from'] = 'Kiev';
console.log(o1);
// удалять можно так же - обращаясь к имени объекта и ключу через   delete obj.namekey;
delete o1.age; 
console.log(o1);
// можно проверять на наличие ключей в объекте через конструкцию if("namekey" in obj){some do} но так же можно через undefined
if("name" in o1){
    console.log(o1.name)
}
// В качестве значения можно тут же указать и другой объект использовав его как ключ - значени в родительском объекте obj = {obj2:{}}
o1.situated = {
    city: 'Kiev',
    street: 'Kopernika',
    house: 3 
}
console.log(o1);


        // // Объекты: перебор свойств
// Для перебора всех свойств из объекта используем  for (var key in obj){код что делать}, где key имя переменной и obj имя объекта;
// for..in последовательно переберёт свойства объекта obj, имя каждого свойства будет записано в key и вызвано тело цикла;
// вызывать значения можно через obj[key];
// порядок перебора: изначально строковые ключи (свойства), идут так как их задали, цифры же перебивают - идут первыми и по возраст.
// но можно цифры привести к строковым с помощью добавления " + "  перед числом

for(var key in o1){
    console.log('ключ ' + key + ' значение ' + o1[key]);
}
// для подсчёта ключей (свойств) объекта можно использовать счётчик в комбинации с for in
var counter = 0;
for(var key in o1){
    counter++;
}
console.log('к-во свойств в o1 = ' + counter);










// Практика по теории
// 1. Задача 
console.log('Задача 1');
console.log('1.1');
var user = {}
console.log(user);
console.log('1.2');
user.name = 'Вася';
console.log(user);
console.log('1.3');
user.surname = "Петров";
console.log(user);
console.log('1.4');
user.name = "Сергей"
console.log(user);
console.log('1.5');
delete user.name;
console.log(user);

// 2. Задача
console.log('Задача 2');
// Создайте функцию isEmpty(obj), которая возвращает true, если в объекте нет свойств и false – если хоть одно свойство есть.

function isEmpty(obj){
    for(var key in obj){
        return false;
    } 
    return true;
}
var schedule = {};
console.log(isEmpty(schedule));
var schedule1 = {name: 1};
console.log(isEmpty(schedule1));

// 3. Задача
// Есть объект salaries с зарплатами. Напишите код, который выведет сумму всех зарплат.
// Если объект пустой, то результат должен быть 0.
var salaries = {
    "Вася": 100,
    "Петя": 300,
    "Даша": 250
};
var summ = 0;
for(var key in salaries){
    summ += salaries[key]
}
console.log(summ);

// 4. Задача
// Свойство с наибольшим значением
// Есть объект salaries с зарплатами. Напишите код, который выведет имя сотрудника, у которого самая большая зарплата.
// Если объект пустой, то пусть он выводит «нет сотрудников».
var maxKey = 0;
for(var max in salaries){
    if(maxKey<salaries[max]){
        maxKey = salaries[max];
    }
}
console.log(maxKey);

// 5. Задача
// Создайте функцию multiplyNumeric, которая получает объект и умножает все численные свойства на 2. 
var menu = {
    'width': 300,
    'height': 400,
    'title': 'My menu'
}
console.log(menu);
function isNumeric(n) {
    return !isNaN(parseFloat(n)) && isFinite(n)
}
function multiplyNumeric(obj){
    for(var numb in obj){
        // if(typeof obj[numb] == "number"){
        if(isNumeric(obj[numb])){
            obj[numb] *= 2;
        }
    }
}
multiplyNumeric(menu);
console.log(menu);
