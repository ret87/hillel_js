// 'use strict';
// console.log('Arrays');

//         // Массив – разновидность объекта, которая предназначена для хранения пронумерованных значений и 
//         // предлагает дополнительные методы для удобного манипулирования такой коллекцией.
//     // Синтаксис для создания нового массива – квадратные скобки со списком элементов внутри. 

//     var cars = ['MB', 'BMW', 'Audi'];

//     // Обращаясь к имени мы получим все данные об массиве

//     console.log(cars);

//     // Элементы нумеруются, начиная с нуля.
//     // Чтобы получить нужный элемент из массива – указывается его номер в квадратных скобках:

// console.log(cars[0]);
// console.log(cars[1]);
// console.log(cars[2]);

//     // Общее число элементов, хранимых в массиве, содержится в его свойстве length:

// console.log(cars.length);

//      //Вывести последнее число в массиве

// console.log (cars.length-1);

//     // Элементы можно заменить обратившись к номеру имени массива

// cars[2]= 'WW';

//     // Или добавить

// cars[3]= 'Renault';
// console.log(cars);
// // alert(cars);

//     // В массиве может храниться любое число элементов любого типа.
//     // получить объект из массива и тут же -- его свойство

// cars[4]={mark:'BMW i3'};
// console.log(cars);
// console.log(cars[4].mark);

// //  //
//         // Методы pop/push, shift/unshift - добавляют или удаляют елементы в начало или конец массива
//     // pop - Удаляет последний элемент из массива и возвращает его:

// cars.pop();
// console.log(cars);

//     // push - Добавляет элемент в конец массива:

// cars.push('BMW i5');

//     // arr[arr.length] = ''; так же добавляет в конец массива:

// cars[cars.length] = 'BMW i7';
// console.log(cars);

//     // shift Удаляет из массива первый элемент и возвращает его:

// cars.shift();
// console.log(cars);

//     //unshift Добавляет элемент в начало массива:

// cars.unshift('Mazda RX9');
// console.log(cars);

//     // Методы push и unshift могут добавлять сразу по несколько элементов:

// cars.push('BMW i3', 'BMW i8', 'BMW i9');
// console.log(cars);
// cars.unshift('Mazda RX7', 'Mazda RX8');
// console.log(cars);

// //    // 
//         // Внутреннее устройство массива
//     // Массив – это объект, где в качестве ключей выбраны цифры, с дополнительными методами и свойством length.
//     // Так как это объект, то в функцию он передаётся по ссылке:

// function eat(cars) {
//     cars.pop();        //задали функции определённое действие - но вызовем функцию чуть позже
// }
// console.log(cars);
// eat(cars);             //вызвали функцию дважды и действие произошло - дважды
// eat(cars);             //вызвали функцию дважды и действие произошло - дважды
// console.log(cars);

//     // Ещё одно следствие – можно присваивать в массив любые свойства.

// var cars2 = [];
// cars2[53] = 'Audi R8';
// console.log(cars2);
//     // … Но массивы для того и придуманы в JavaScript, чтобы удобно работать именно с упорядоченными,
//     //  нумерованными данными. Для этого в них существуют специальные методы и свойство length.

//     // Быстродействие массивов - те что работают с концом массива - быстродейственние, те которые с началом - медленнее.
//     // pop/push - быстрее чем  shift/unshift 

// //      //
//         // Перебор элементов
//     // Не стоит использовать for..in
//     // Гораздо лучше for (var i=0; i<arr.length...) обращаться к arr[i];

// for(var i=0; i < cars.length; i++){
//     console.log(cars[i]);
// }

// //      //
//     //Используем length для укорачивания массива, но значения назад уже не вернутся

// cars.length =5;
// console.log(cars);

// //      //
//         //Создание вызовом new Array
//     //var arr = new Array() - создаёт новый массив с именем от VAR и значениями в скобках или числом - на наш выбор

// var cars3 = new Array('Toyota', 'Honda', 'Hunday');
// console.log(cars3);
// var cars4 = new Array(5);
// console.log('new Array(5)' + cars4);

// //      //
//         // Многомерные массивы
//     //это массивы в которых вложены другие массивы 

// var matrix = [
//     [1, 2, 3],
//     [4, 5, 6],
//     [7, 8, 9]
// ] 
// console.log(matrix);
// console.log(matrix[1]);
// console.log(matrix[0][0]);


// //      //
//         //Внутреннее представление массивов
//     //Современные интерпретаторы стараются оптимизировать их и хранить в памяти не в виде хэш-таблицы, 
//     // а в виде непрерывной области памяти, по которой легко пробежаться от начала до конца.
//     // Чтобы у интерпретатора получались эти оптимизации, программист не должен мешать:
//     // -- Не ставить массиву произвольные свойства, такие как arr.test = 5. То есть, работать именно как с массивом, 
//     // а не как с объектом.
//     // -- Заполнять массив непрерывно и по возрастающей. Как только браузер встречает необычное поведение массива, 
//     // например устанавливается значение arr[0], а потом сразу arr[1000], то он начинает работать с ним, как с обычным объектом. 
//     // Как правило, это влечёт преобразование его в хэш-таблицу.
    
//     // Так не стоит делать!
// var arr=[];
// arr.test = 5
// console.log(arr);

//     // Так тоже!
// arr.length = 100;
// console.log(arr);

//     // И вот так тоже!
// arr[1]=10;
// arr[5]=20;
// arr[20]=30;
// console.log(arr);

//      //  
    // remove last elem удаление последнего елемента

// arr.length--;
// console.log(arr);

//      // 
    // add last elem

// arr[arr.length] = 'LAST';
// console.log(arr);

//      //
        // Итого
    // Массивы существуют для работы с упорядоченным набором элементов.

    // Объявление:

    // // предпочтительное
    // var arr = [элемент1, элемент2...];
    
    // Или
    // // new Array
    // var arr = new Array(элемент1, элемент2...);
    // При этом new Array(число) создаёт массив заданной длины, без элементов.

    // Свойство length – длина массива. Если точнее, то последний индекс массива плюс 1. 
    // Если её уменьшить вручную, то массив укоротится. Если length больше реального количества элементов, 
    // то отсутствующие элементы равны undefined.

    // Массив можно использовать как очередь или стек.

    // Операции с концом массива:

    // arr.push(элемент1, элемент2...) добавляет элементы в конец.
    // var elem = arr.pop() удаляет и возвращает последний элемент.
    // Операции с началом массива:

    // arr.unshift(элемент1, элемент2...) добавляет элементы в начало.
    // var elem = arr.shift() удаляет и возвращает первый элемент.
    // Эти операции перенумеровывают все элементы, поэтому работают медленно.


//      // Задачи к теории
    // 1. Задача 
    // Как получить последний элемент из произвольного массива?
    // У нас есть массив goods. Сколько в нем элементов – не знаем, но можем прочитать из goods.length.
    // Напишите код для получения последнего элемента goods.

// var goods = [0,1,2,3,4,5,6];

    // вариант 1
// console.log(goods);
// console.log (goods.length);
// console.log(goods[6]);

    // вариант 2
// console.log (goods.length-1);

    // 2. Задача
    // Добавить новый элемент в массив
    // Как добавить элемент в конец произвольного массива?
    // У нас есть массив goods. Напишите код для добавления в его конец значения «Компьютер».

// var goods = [0,1,2,3,4,5,6];
    // вариант 1
// goods.push("Компьютер");
// console.log (goods);
    // вариант 2
// goods[goods.length] = 'Компьютер';
// console.log (goods);


    // 3. Задача
    // Задача из 5 шагов-строк:
    // Создайте массив styles с элементами «Джаз», «Блюз».
    // Добавьте в конец значение «Рок-н-Ролл»
    // Замените предпоследнее значение с конца на «Классика». 
    // Код замены предпоследнего значения должен работать для массивов любой длины.
    // Удалите первое значение массива и выведите его alert.
    // Добавьте в начало значения «Рэп» и «Регги».
    // Массив в результате каждого шага:
    // 
    // Джаз, Блюз
    // Джаз, Блюз, Рок-н-Ролл
    // Джаз, Классика, Рок-н-Ролл
    // Классика, Рок-н-Ролл
    // Рэп, Регги, Классика, Рок-н-Ролл

// var styles = ["Джаз", "Блюз"];
// console.log(styles);
// styles[styles.length] = "Рок-н-Ролл";
// console.log(styles);
// styles[styles.length-2] = "Классика";
// console.log(styles);
// alert("удалили " + styles.shift());
// console.log(styles);
// styles.unshift("Рэп", "Регги");
// console.log(styles);

    // 4. Задача
    // Напишите код для вывода alert случайного значения из массива:
    // var arr = ["Яблоко", "Апельсин", "Груша", "Лимон"];
    // P.S. Код для генерации случайного целого от min to max включительно:
    // var rand = min + Math.floor(Math.random() * (max + 1 - min));

// var arr = ["Яблоко", "Апельсин", "Груша", "Лимон"];
// var min = 0;
// var max = arr.length-1;
// var rand = min + Math.floor(Math.random() * (max + 1 - min));
// console.log(rand);
// alert(arr[rand]);

    // 5. Задача
    // Создайте калькулятор для введённых значений
    // Напишите код, который:
    // Запрашивает по очереди значения при помощи prompt и сохраняет их в массиве.
    // Заканчивает ввод, как только посетитель введёт пустую строку, не число или нажмёт «Отмена».
    // При этом ноль 0 не должен заканчивать ввод, это разрешённое число.
    // Выводит сумму всех значений массива

// var numbers = [];
// while (true) {
//     var value = prompt("Введите число", 0);
//     if (value === "" || value === null || isNaN(value)) break;    
//     numbers.push(+value);
// }
// var sum = 0;
// for (var i = 0; i < numbers.length; i++) {
//     sum += numbers[i];
// }
// alert( sum );

    // 6. Задача
    // массив - объект и если мы приравниваем а = b, то изменения в любом из двух объектов - будут изменены в 2их.
// var a = [1,2,3,4];
// var b = a;
// b[4]=5;
// console.log(a);
// a[5]=6;
// console.log(b);

    //7. Задача 
    // Поиск в массиве
    // Создайте функцию find(arr, value), которая ищет в массиве arr значение value и 
    // возвращает его номер, если найдено, или -1, если не найдено.
    // Например:
    // arr = ["test", 2, 1.5, false];
    // find(arr, "test"); // 0
    // find(arr, 2); // 1
    // find(arr, 1.5); // 2
    // find(arr, 0); // -1

// var arr = ["test", 2, 1.5, false];
// var value = +prompt('vvedite iskomoe chislo', )
// find(arr, value);
// for(var i=0; i < arr.length; i++){
//     console.log(arr[i]);
//     if(arr[i]==value){
//         alert(i);
//     } else{
//         alert('-');
//     }
// }

        //8. Задача Решето Эратосфена
    // Целое число, большее 1, называется простым, если оно не делится нацело ни на какое другое, кроме себя и 1.    
    // Древний алгоритм «Решето Эратосфена» для поиска всех простых чисел до n выглядит так:
    
    // Создать список последовательных чисел от 2 до n: 2, 3, 4, ..., n.
    // Пусть p=2, это первое простое число.

    // Зачеркнуть все последующие числа в списке с разницей в p, т.е. 2*p, 3*p, 4*p и т.д. В случае p=2 это будут 4,6,8....
    // Поменять значение p на первое не зачеркнутое число после p.
    
    // Повторить шаги 3-4 пока p*p < n.
    // Все оставшиеся не зачеркнутыми числа – простые.
    // Посмотрите также анимацию алгоритма.
    // Реализуйте «Решето Эратосфена» в JavaScript, используя массив.
    // Найдите все простые числа до 100 и выведите их сумму.

// var arr = [];
// for(var i=2; i<100; i++){
//     arr[i]=true;
// }
// var p =2;
// do {
//     for(i=p*2; i<100;i+=p){
//         arr[i]=false
//     }
//     for(i=p+1;i<100;i++){       
//         if(arr[i]) break;
//     }
//     p=i;
// }   while(p*p<100);
// var sum = 0;
// for(i=0;i<arr.length;i++){
//     if(arr[i]){
//         sum+=i;
//     }
// }
// console.log(sum);



//      // 
        // Lecions tasks
    // Задача с лекции №1
    // Создать массив размерностью n, где n вводится с клавиатуры. Заполнить случайными числами в диапазоне -20 ... 45. 
    // Вывести в документ числа, которые состоят из двух цифр.

// var n =+prompt('vvedite razmer massiva', 5);
// var arr=[];
// arr.length=n;
// for(var i=0; i<arr.length; i++){
//     arr[i] = Math.floor(Math.random()*46)-20;    
//     console.log(arr[i]);
//     if(
//         (arr[i]>9 && arr[i] <100) || 
//         (arr[i]<-9 && arr[i] >-100)
//     ){
//         console.log('chisla x2 '+ arr[i]);
//         document.write(arr[i] + '<br>');
//     } 
// } 


        // Задача с лекции №2
        // Создать массив с длинной 21. Найти минимальный элемент и поменять его местами с центральным элементом массива.
// var arr=[];
// arr.length=21;
// for(var i=0; i<arr.length; i++){
//     arr[i] =-100 + Math.floor(Math.random()*201);    
// }        
// if(arr.length){
//     var min= arr[0]; //делаем переменную и приравниваем её к первому номеру в искомом массиве, условно предполагая, что он минимален
//     var max = arr[0]; // такая же процедура только с максимумом
// }
// for(i=-100; i<arr.length; i++){ // задаём функцию стандартного перебора
//     if(arr[i] < min){  // поочередно проверяя следующие по очереди с массиве цифры с минимальным
//         min = arr[i]; // переприсваиваем наш условный мин к след минимальному в массиве и так до тех пор пока не закончится цикл
//     } if(arr[i]>max){ // такая же процедура только с максимумом
//         max = arr[i]; 
//     }
// }
// console.log("было = " + arr);

// // ищем номер в массиве минимального числа
// var lengthMin=0;
// for(var i=0; i < arr.length; i++){
//     if(arr[i]==min){
//         lengthMin=i;
//     }
// }
// console.log('номер минимального числа =' + lengthMin);

// // меняем местами минимальное число с центральным
// var centrale = Math.floor(arr.length/2);
// arr.push(arr[centrale]); //добавили центр число в самый конец
// arr[centrale] = min;
// arr[lengthMin] = arr[arr.length-1];
// arr.pop();
// console.log('стало = ' + arr);
// console.log('min = ' + min);
// console.log('max = ' + max);


        // Задача с лекции №3
    // В массиве arr заполненом случайными числами ( > 0) - произвести перезапись значений - i в степени arr[i]. 
    // i - номер итерации. Нельзя использовать Math.power()

// var res;
// var arr = [];
// arr.length= +prompt('vvedite razmer massiva', 10)
// var n = arr.length;
// for(var i=0; i<n; i++){
//     arr[i] = Math.floor(Math.random()*10 + 1);
// }
// console.log(arr);
// for(var i=0; i<n; i++){
//     res = i**arr[i];
//     console.log(res);
//     arr[i]=res;
// }
// console.log(arr);
