'use strict';
console.log('Functions');

        // // Функции от дев мозилы
// функция это специальный тип объектов, позволяющий формализовать средствами языка определённую логику поведения и обработки данных;
// можно передавать как аргумент и в качестве резултьтата выдавать другую функцию;
// можно присваивать в качестве значений переменным или свойствам объектов;


    // // Объявление функций
// Функции вида "function declaration" 
// - function name(param) {code;}
// - значения в параметрах изменяются только в самой функции (локально)
// - объекты в параметрах изменяются как локально так и глобально

// Функции вида "function expression"
// - var funct = function (param) {code;}
// - по умолчанию не имеет имени
// - присваивается изначально к var
// - имя функции может использоваться для вызова самой себя;
// - функция может быть условием
// Метод — это функция, которая является свойством объекта

var factorial = function fac(n){
    return (n<2) ? 1 : n* fac(n-1);
}
console.log(factorial(4));

// - функция map получает функцию первым аргументом и массив вторым,
//  выполняет функцию для каждого элемента принятого массива вторым аргументом.

function map(f, a) {
    var result = []; // Create a new Array
    var i; // Declare variable
    for (i = 0; i != a.length; i++)
      result[i] = f(a[i]);
        return result;
  }
  var f = function(x) {
      return x * x * x; 
  }
  var numbers = [0, 1, 2, 5, 10];
  var cube = map(f,numbers);
  console.log(cube);

    // // Вызовы функций
// - обращаясь к имени функции и к его параметрам - идёт вызов функции
// - к function declaration, можно обращаться до её объявления
// - передавать с пом аргумента можно как объекты, так и функции самих себя 
// - Существуют частые случаи, когда функции необходимо вызывать динамически, или поменять номера аргументов функции, 
// или необходимо вызвать функцию с привязкой к определенному контексту.

// Функция может вызвать саму себя. Например, вот функция рекурсивного вычисления факториала:
function factorial(n) {
    if ((n === 0) || (n === 1))
      return 1;
      else
      return (n * factorial(n - 1));
}
var a, b, c, d, e;
a = factorial(1); // a gets the value 1
b = factorial(2); // b gets the value 2
c = factorial(3); // c gets the value 6
d = factorial(4); // d gets the value 24
e = factorial(5); // e gets the value 120


    // // Область видимости функций
