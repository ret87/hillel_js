'use strict';
console.log('Functions');

// Lection 6 ФУНКЦИИ
// Подпрограмма - программа существующая в программе:
// - Функции;
// - Процедуры; (о них позже)

// Функции: 
// function - декларирование функции
// function имя(параметры/аргументы){что делаем с параметрами}
// всё что выводится с помощью () - это функция, исключения условия фор, иф, ваил, до ваил.

// Параметры: 
// - формальные (те которые указаны при написании/описании функции);
// - фактические (те что уже конкретно указаны при вызове функции - обращении к ней);
// формальные параметры принимают значения фактических
// можно передавать как числа, строку, так и массивы, функции, объекты...
function sum (a, b){        // - a, b тут формальные параметры // foo - имя функции
    return a + b;           // - а всё что внутри {} это действие с параметрами
}
console.log(sum(2,3));      // - 2,3 тут фактические параметры

// Создание функции:
// Функция декларирования - Function declaration
// можно обращаться выше чем запись самой функции
declaration();
function declaration (){}

// Функция выражения (вырожение с присвоением) - Function expression
var expression = function (){}



// // Примеры

// function declaration
// выведется как выше так и ниже записи самой функции
foo();
foo();
function foo (){
    console.log('function declaration');
}
foo();
foo();

// так как я не определил параметры - будет андефаинд 
function foo1 (a, b){
    console.log(a, b);
}
foo1();

// формальные параметры принимают значения фактических
function foo2 (a, b){
    console.log(a, b);
}
foo2(5, 2);
// можно передавать как числа, строку, так и массивы, функции, объекты...
foo2('text', [82,2,3,4,5]);
var z = 'hello hello'
foo2('text', z);

// function expression
// bar()  - так нельзя! вызов только после создания самой функции
var bar = function (){
    console.log('function expression');
}
bar()

