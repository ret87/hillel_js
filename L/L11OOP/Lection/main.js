'use strict';
console.log('OOP Prototype');

// Объектно-ориентированное програмирование
// - Заставляет нас програмировать ориентируясь на что-то (объект).
// - JS - прототипно-ориентированный язык.
// - Абстракция - нечто не определённое.
// - Абстрактный тип данных - математическая модель.
// - Математическая модель - описание сущности, через все возможные свойства (свойства которые не нужны их нет),
// то есть она учитывает в этой сущности, только то, что нам необходимо для поведения данной структуры.
// - Класс - абстрактное описание структуры типов данных в программировании. 
// - Класс - набор свойств, которые нам необходимы для реализации типов данных, данной структуры. 
// - Объект - это экземпляр класса (его представитель), то есть объект представляет определённый класс в нашей программе.
// - Объект - физическое представление класса, с конкретными свойствами.

// JS & OOP
// - Есть классы и объекты.
// - Основные принципы: абстрагирование, наследование, инкапсуляция и полиморфизм.
// * Абстрагирование: контекстное понимание предмета, формализуемое в виде класса;
// * Наследование: на каждом иерархическом шаге учитываются только изменения, не дублируя всё остальное, учтённое на предыдущих шагах;
// * Инкапсуляция: намеренное сокрытие свойств, для того что бы обращаться к конкретным свойствам через конкретные обращения; 
// * Полиморфиз: реаигирование объектов на один и тот же метод по-разному;

// Конструктор - собирает объект на основе класса (функции), в примере ниже объект Р собирается на основе параметров функции Person;
// function Person(x,y) {x,y, run};
// p = new Person();

// NEW - третье правило поведения THIS:
// * new - всегда создаёт новый объект;
// * new - вызывает функцию к которой его прировняли;
// * new - меняет поведение THIS и заставляет объект смотреть на новый, созданный при помощи new;
function Person(x,y){
    x=x;
    y=y;
    // var run;
    var run = function(x,y){return run = x + y;};
    // console.log(x,y,run)
};
var p = new Person(10, 15);
console.log(p);