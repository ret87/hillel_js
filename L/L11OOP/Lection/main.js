'use strict';
console.log('OOP Prototype');

        // Объектно-ориентированное програмирование

// - Заставляет нас програмировать ориентируясь на что-то (объект).
// - JS - прототипно-ориентированный язык.
// - Абстракция - нечто не определённое.
// - Абстрактный тип данных - математическая модель.
// - Математическая модель - описание сущности, через все возможные свойства (свойства которые не нужны их нет),
// то есть она учитывает в этой сущности, только то, что нам необходимо для поведения данной структуры.
// - Класс - абстрактное описание структуры типов данных в программировании. 
// - Класс - набор свойств, которые нам необходимы для реализации типов данных, данной структуры. 
// - Объект - это экземпляр класса (его представитель), то есть объект представляет определённый класс в нашей программе.
// - Объект - физическое представление класса, с конкретными свойствами.

    // JS & OOP
// - Есть классы и объекты.
// - Основные принципы: абстрагирование, наследование, инкапсуляция и полиморфизм.
// * Абстрагирование: контекстное понимание предмета, формализуемое в виде класса;
// * Наследование: на каждом иерархическом шаге учитываются только изменения, не дублируя всё остальное, учтённое на предыдущих шагах;
// * Инкапсуляция: намеренное сокрытие свойств, для того что бы обращаться к конкретным свойствам через конкретные обращения; 
// * Полиморфиз: реаигирование объектов на один и тот же метод по-разному;

    // Конструктор - собирает объект на основе класса (функции), в примере ниже объект Р собирается на основе параметров функции Person
// function Person(x,y) {x,y, run};
// p = new Person();

    // NEW - третье правило поведения THIS:
// * new - всегда создаёт новый объект;
// * new - вызывает функцию к которой его прировняли;
// * new - меняет поведение THIS и заставляет объект смотреть на новый, созданный при помощи new;

    // - Прототипно ориентированное програмирование -  при создании любой сущности (число, строка, булеан, объект, массив, функция...),
// она цепляется к подобной как ДИТЁ (CHILD), следовательно в JS есть заранее подготовленные объект под ТИП ДАННЫХ.
// - Прототип - это выше стоящая сущность, по которой и был создан определённый тип данных. 
// - По сути прототип это РОДИТЕЛЬ определённой сущности.

    // Работа в памяти JS
// - В JS всё является по своей сути объектом, а типы данных это основные прототипы. По этому JS относится к ООП, но прототипный.

                                            // ОБЪЕКТЫ
//  Array       Function        Object      Window      Number      String      Boolean     и т.д.

    // __proto__
// - Каждый раз как мы создаём любую сущность, мы определяем под её видом ячейку, которая является дитём определённого прототипа,
// т.е. создав новый массив - память JS определяет его ячейку под Array, уже с некиеми свойствами определёнными для массивов.
// - Связывает родителя и чаилд определённая ссылка, которая указывает чаилду его прототип.
// __proto__ - та самая ссылка по которой можно сделать поиск в прототипе определённой сущности.
// сущность.__proto__ 
var arr = [1, 3, 4];
var obj = {x: 1};
console.log(arr);
console.log(arr.__proto__); 
console.log(arr.__proto__.__proto__);
console.log(arr.__proto__.__proto__.__proto__);
console.log(obj);
console.log(arr.__proto__.__proto__ === obj.__proto__); // так как у них общий родитель 

// - Прототипная цепочка - цепочка объектов;
// - Экземпляр - это объект;
// - Роль конструктора - выполняется функцией;
// - Но функция на прямую не может создать объект, так как они в разных цепочках; 
// - Порождение специально оюъекта, создав новый объект и приравняв его с через NEW к функции - 
// мы получаем новый объект со свойствами функции.
// - Функция конструктор - абстрактная единица, может положить в прототип кучу методов и поведения.